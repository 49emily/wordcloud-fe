{"ast":null,"code":"var _jsxFileName = \"/Users/emilyzhang/my-app/src/components/InputArea.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport textract from \"textract\";\nimport Button from \"@mui/material/Button\";\nimport Input from \"@mui/material/Input\";\nimport Stack from \"@mui/material/Stack\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputArea(props) {\n  _s();\n  const [file, setFile] = useState();\n  // const [text, setText] = useState(\"\");\n\n  const [fileName, setFileName] = useState(\"\");\n  function handleChange(event) {\n    console.log(event.target.files);\n    if (event.target.files.length >= 1) {\n      setFile(event.target.files[0]);\n      setFileName(event.target.files[0].name);\n      props.changeHasFile(true);\n    }\n  }\n  function handleSubmission(event) {\n    // works for txt file, not for pdf or rtf\n    if (file.type === \"text/plain\") {\n      const reader = new FileReader();\n      reader.onload = () => {\n        props.generate(reader.result);\n      };\n      reader.readAsText(file);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-area\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      direction: {\n        xs: \"column\",\n        sm: \"row\"\n      },\n      spacing: 2.5,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"upload\",\n          variant: \"outlined\",\n          size: \"large\",\n          component: \"label\",\n          children: [\"Upload\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            hidden: true,\n            accept: \"application/pdf,application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, text/plain, text/rtf\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-name\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"submit\",\n        variant: \"contained\",\n        size: \"large\",\n        onClick: handleSubmission,\n        disabled: !props.hasFile,\n        children: \"Generate WordCloud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(InputArea, \"PBVAdP7p4SXYO8jGjUjfAQ9UxO0=\");\n_c = InputArea;\nexport default InputArea;\nvar _c;\n$RefreshReg$(_c, \"InputArea\");","map":{"version":3,"names":["React","useState","textract","Button","Input","Stack","InputArea","props","file","setFile","fileName","setFileName","handleChange","event","console","log","target","files","length","name","changeHasFile","handleSubmission","type","reader","FileReader","onload","generate","result","readAsText","xs","sm","hasFile"],"sources":["/Users/emilyzhang/my-app/src/components/InputArea.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport textract from \"textract\";\nimport Button from \"@mui/material/Button\";\nimport Input from \"@mui/material/Input\";\n\nimport Stack from \"@mui/material/Stack\";\n\nfunction InputArea(props) {\n  const [file, setFile] = useState();\n  // const [text, setText] = useState(\"\");\n\n  const [fileName, setFileName] = useState(\"\");\n\n  function handleChange(event) {\n    console.log(event.target.files);\n    if (event.target.files.length >= 1) {\n      setFile(event.target.files[0]);\n      setFileName(event.target.files[0].name);\n      props.changeHasFile(true);\n    }\n  }\n\n  function handleSubmission(event) {\n    // works for txt file, not for pdf or rtf\n    if (file.type === \"text/plain\") {\n      const reader = new FileReader();\n      reader.onload = () => {\n        props.generate(reader.result);\n      };\n      reader.readAsText(file);\n    }\n  }\n  return (\n    <div className=\"input-area\">\n      {/* <input\n        type=\"file\"\n        name=\"file\"\n        accept=\"application/pdf,application/msword,\n  application/vnd.openxmlformats-officedocument.wordprocessingml.document, text/plain, text/rtf\"\n        onChange={handleChange}\n      /> */}\n      <Stack\n        direction={{ xs: \"column\", sm: \"row\" }}\n        spacing={2.5}\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <div>\n          <Button\n            className=\"upload\"\n            variant=\"outlined\"\n            size=\"large\"\n            component=\"label\"\n          >\n            Upload\n            <input\n              type=\"file\"\n              hidden\n              accept=\"application/pdf,application/msword,\n  application/vnd.openxmlformats-officedocument.wordprocessingml.document, text/plain, text/rtf\"\n              onChange={handleChange}\n            />\n          </Button>\n\n          <span className=\"file-name\">{fileName}</span>\n        </div>\n\n        <Button\n          className=\"submit\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleSubmission}\n          disabled={!props.hasFile}\n        >\n          Generate WordCloud\n        </Button>\n      </Stack>\n    </div>\n  );\n}\n\nexport default InputArea;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,KAAK,MAAM,qBAAqB;AAEvC,OAAOC,KAAK,MAAM,qBAAqB;AAAC;AAExC,SAASC,SAAS,CAACC,KAAK,EAAE;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,EAAE;EAClC;;EAEA,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,SAASW,YAAY,CAACC,KAAK,EAAE;IAC3BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;IAC/B,IAAIJ,KAAK,CAACG,MAAM,CAACC,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;MAClCT,OAAO,CAACI,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9BN,WAAW,CAACE,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC;MACvCZ,KAAK,CAACa,aAAa,CAAC,IAAI,CAAC;IAC3B;EACF;EAEA,SAASC,gBAAgB,CAACR,KAAK,EAAE;IAC/B;IACA,IAAIL,IAAI,CAACc,IAAI,KAAK,YAAY,EAAE;MAC9B,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QACpBlB,KAAK,CAACmB,QAAQ,CAACH,MAAM,CAACI,MAAM,CAAC;MAC/B,CAAC;MACDJ,MAAM,CAACK,UAAU,CAACpB,IAAI,CAAC;IACzB;EACF;EACA,oBACE;IAAK,SAAS,EAAC,YAAY;IAAA,uBAQzB,QAAC,KAAK;MACJ,SAAS,EAAE;QAAEqB,EAAE,EAAE,QAAQ;QAAEC,EAAE,EAAE;MAAM,CAAE;MACvC,OAAO,EAAE,GAAI;MACb,cAAc,EAAC,QAAQ;MACvB,UAAU,EAAC,QAAQ;MAAA,wBAEnB;QAAA,wBACE,QAAC,MAAM;UACL,SAAS,EAAC,QAAQ;UAClB,OAAO,EAAC,UAAU;UAClB,IAAI,EAAC,OAAO;UACZ,SAAS,EAAC,OAAO;UAAA,kCAGjB;YACE,IAAI,EAAC,MAAM;YACX,MAAM;YACN,MAAM,EAAC,mIAC2E;YAClF,QAAQ,EAAElB;UAAa;YAAA;YAAA;YAAA;UAAA,QACvB;QAAA;UAAA;UAAA;UAAA;QAAA,QACK,eAET;UAAM,SAAS,EAAC,WAAW;UAAA,UAAEF;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QACzC,eAEN,QAAC,MAAM;QACL,SAAS,EAAC,QAAQ;QAClB,OAAO,EAAC,WAAW;QACnB,IAAI,EAAC,OAAO;QACZ,OAAO,EAAEW,gBAAiB;QAC1B,QAAQ,EAAE,CAACd,KAAK,CAACwB,OAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGlB;IAAA;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV;AAAC,GAxEQzB,SAAS;AAAA,KAATA,SAAS;AA0ElB,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}