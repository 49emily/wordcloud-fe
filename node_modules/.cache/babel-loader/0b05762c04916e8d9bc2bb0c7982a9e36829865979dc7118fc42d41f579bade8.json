{"ast":null,"code":"var _jsxFileName = \"/Users/emilyzhang/my-app/src/components/WordCloud.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordCloud(props) {\n  _s();\n  function pickColor() {\n    let newColors = [...colors];\n    newColors.splice(newColors.indexOf(prevColor), 1);\n    let newColor = newColors[Math.floor(Math.random() * newColors.length)];\n    prevColor = newColor;\n    return newColor;\n  }\n  function shuffleArray(arr) {\n    // Knuth shuffle to randomize array\n    let cur = arr.length; // starts at end of erray\n    let index;\n    while (cur !== 0) {\n      index = Math.floor(Math.random() * cur); // pick random index\n      cur--;\n\n      // swap with cur\n      [arr[cur], arr[index]] = [arr[index], arr[cur]];\n    }\n    return arr;\n  }\n  const punctuationless = props.text.replace(/[\\.,-\\/#!$%\\^&\\*;:{}=\\-_`~()@\\+\\?><\\[\\]\\+]/g, \"\").replace(/(\\r\\n|\\n|\\r)/gm, \" \");\n\n  // const punctuationless = props.text.replace(\n  //   /[.,-/#!$%^&*;:{}=\\-_`~()@+?><[]+]/g,\n  //   \"\"\n  // );\n  const invalidWords = [\"a\", \"an\", \"the\", \"\"];\n  const minFont = 1; //em\n  const maxFont = 11;\n  const colors = [\"#2C3639\", \"#85586F\", \"#A27B5C\", \"#EDECE8\", \"#E3CAA5\", \"#B25068\"];\n  let prevColor = colors[0];\n  // console.log(\"Generating Word Cloud...\");\n  // console.log(punctuationless);\n  const words = punctuationless.split(\" \");\n  // console.log(words);\n  const map = new Map();\n  words.forEach(word => {\n    word = word.toLowerCase();\n    if (!map.has(word)) {\n      if (!invalidWords.includes(word)) {\n        map.set(word, 1);\n      }\n    } else {\n      map.set(word, map.get(word) + 1);\n    }\n  });\n\n  // console.log(map);\n\n  const sortedMap = new Map([...map.entries()].sort((a, b) => b[1] - a[1]));\n  // console.log(sortedMap);\n  const keys = sortedMap.keys();\n  const keysArr = [...keys];\n  useEffect(() => {\n    props.updateLimits(keysArr.length);\n  }); // so that slider is < 100 if number of words is < 100\n  // console.log(keysArr.length);\n  const maxFreq = map.get(keysArr[0]);\n  const minFreq = map.get(keysArr[props.max - 1]);\n  console.log(keysArr[props.max - 1]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordcloud\",\n    children: shuffleArray(keysArr.slice(0, props.numWords)).map(key => {\n      const fontSize = maxFont + (maxFont - minFont) / (maxFreq - minFreq) * (map.get(key) - maxFreq);\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"rotated\",\n        style: {\n          fontSize: fontSize + \"em\",\n          color: pickColor()\n        },\n        children: [\" \", key, \" \"]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(WordCloud, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = WordCloud;\nexport default WordCloud;\nvar _c;\n$RefreshReg$(_c, \"WordCloud\");","map":{"version":3,"names":["useEffect","WordCloud","props","pickColor","newColors","colors","splice","indexOf","prevColor","newColor","Math","floor","random","length","shuffleArray","arr","cur","index","punctuationless","text","replace","invalidWords","minFont","maxFont","words","split","map","Map","forEach","word","toLowerCase","has","includes","set","get","sortedMap","entries","sort","a","b","keys","keysArr","updateLimits","maxFreq","minFreq","max","console","log","slice","numWords","key","fontSize","color"],"sources":["/Users/emilyzhang/my-app/src/components/WordCloud.jsx"],"sourcesContent":["import { useEffect } from \"react\";\n\nfunction WordCloud(props) {\n  function pickColor() {\n    let newColors = [...colors];\n    newColors.splice(newColors.indexOf(prevColor), 1);\n    let newColor = newColors[Math.floor(Math.random() * newColors.length)];\n    prevColor = newColor;\n    return newColor;\n  }\n  function shuffleArray(arr) {\n    // Knuth shuffle to randomize array\n    let cur = arr.length; // starts at end of erray\n    let index;\n\n    while (cur !== 0) {\n      index = Math.floor(Math.random() * cur); // pick random index\n      cur--;\n\n      // swap with cur\n      [arr[cur], arr[index]] = [arr[index], arr[cur]];\n    }\n\n    return arr;\n  }\n  const punctuationless = props.text\n    .replace(/[\\.,-\\/#!$%\\^&\\*;:{}=\\-_`~()@\\+\\?><\\[\\]\\+]/g, \"\")\n    .replace(/(\\r\\n|\\n|\\r)/gm, \" \");\n\n  // const punctuationless = props.text.replace(\n  //   /[.,-/#!$%^&*;:{}=\\-_`~()@+?><[]+]/g,\n  //   \"\"\n  // );\n  const invalidWords = [\"a\", \"an\", \"the\", \"\"];\n  const minFont = 1; //em\n  const maxFont = 11;\n  const colors = [\"#2C3639\", \"#85586F\", \"#A27B5C\", \"#EDECE8\", \"#E3CAA5\", \"#B25068\"];\n  let prevColor = colors[0];\n  // console.log(\"Generating Word Cloud...\");\n  // console.log(punctuationless);\n  const words = punctuationless.split(\" \");\n  // console.log(words);\n  const map = new Map();\n\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (!map.has(word)) {\n      if (!invalidWords.includes(word)) {\n        map.set(word, 1);\n      }\n    } else {\n      map.set(word, map.get(word) + 1);\n    }\n  });\n\n  // console.log(map);\n\n  const sortedMap = new Map([...map.entries()].sort((a, b) => b[1] - a[1]));\n  // console.log(sortedMap);\n  const keys = sortedMap.keys();\n  const keysArr = [...keys];\n  useEffect(() => {\n    props.updateLimits(keysArr.length);\n  }); // so that slider is < 100 if number of words is < 100\n  // console.log(keysArr.length);\n  const maxFreq = map.get(keysArr[0]);\n  const minFreq = map.get(keysArr[props.max - 1]);\n  console.log(keysArr[props.max - 1]);\n  return (\n    <div className=\"wordcloud\">\n      {shuffleArray(keysArr.slice(0, props.numWords)).map((key) => {\n        const fontSize =\n          maxFont + ((maxFont - minFont) / (maxFreq - minFreq)) * (map.get(key) - maxFreq);\n        return (\n          <span\n            key={key}\n            className=\"rotated\"\n            style={{\n              fontSize: fontSize + \"em\",\n              color: pickColor(),\n            }}\n          >\n            {\" \"}\n            {key}{\" \"}\n          </span>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default WordCloud;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}